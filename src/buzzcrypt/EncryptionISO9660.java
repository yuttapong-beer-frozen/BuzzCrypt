/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package buzzcrypt;


import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;

import java.io.File;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Properties;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;
import javax.crypto.Cipher;
import javax.crypto.CipherOutputStream;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.table.DefaultTableModel;

import buzzcrypt.FrameMainProgram.*;
import static buzzcrypt.FrameMainProgram.jTable1;

import java.nio.charset.Charset;
import static java.nio.charset.StandardCharsets.UTF_8;
import java.util.Base64;
/**
 *
 * @author Beerbuzz02
 */
public class EncryptionISO9660 extends javax.swing.JInternalFrame {

    /**
     * Creates new form EncryptionISO9660
     */
    public EncryptionISO9660() {
        initComponents();
    }
    private static final int IV_LENGTH = 16;
    public boolean checks;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")  
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        passphrse = new javax.swing.JPasswordField();
        repasspharse = new javax.swing.JPasswordField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Encryption ISO 9660");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_buzzcrypt/bee_encry.png_24x24.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Passpharse");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Re - Passpharse");

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setText("Select");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton2.setText("Generate");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Select File to Encryption");

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton3.setText("Save Key");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_buzzcrypt/eye.png_24x24.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(56, 56, 56)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(passphrse)
                    .addComponent(repasspharse)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jCheckBox1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jCheckBox2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3)))
                        .addGap(0, 261, Short.MAX_VALUE)))
                .addGap(12, 12, 12)
                .addComponent(jCheckBox3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addGap(19, 19, 19))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(passphrse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jCheckBox3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(repasspharse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox2)
                            .addComponent(jButton3)))
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel4))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    
    
 
    
  public void outzip(String zipFile,String outputFolder){
    try {
        byte[] buffer = new byte[1024];
        ZipInputStream zis = new ZipInputStream(new FileInputStream(zipFile));
        ZipEntry ze = zis.getNextEntry();
        if(ze == null ){
            checks = false;
            
        }else{
            checks = true;
        } while(ze != null){
            String fileName = ze.getName();
            File newFile = new File(outputFolder + File.separator + fileName);
            FileOutputStream fos = new FileOutputStream(newFile);
            
            int len;
            while((len = zis.read(buffer)) > 0){
                fos.write(buffer, 0 , len);
            }
            fos.close();
            ze = zis.getNextEntry();
        }
        zis.closeEntry();
        zis.close();
        System.out.println("Done");
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null, ex);
    }
}
public static void intozip(String filepath,String fname)
{
    try {
            FileInputStream fis = new FileInputStream(filepath);
            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(filepath+".zip"));
            zos.putNextEntry(new ZipEntry(fname));
            byte [] Buffer = new byte[1024];
            int bytesRead;
            while((bytesRead = fis.read(Buffer)) > 0 ){
                zos.write(Buffer,0,bytesRead);
            }
            zos.closeEntry();
            zos.close();
            fis.close();
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null, ex);
    }

}
public static String md5(String input)
{
    
        String md5 = null;
        if(null == input ) return null;
        try {
        MessageDigest digest = MessageDigest.getInstance("MD5");
        digest.update(input.getBytes(),0,input.length());
        md5 = new BigInteger(1,digest.digest()).toString(8);
    } catch (NoSuchAlgorithmException ex) {
        ex.printStackTrace();
    }
    return md5;
}

public static void encrypt(InputStream in,OutputStream out,String password){
    try {
        byte[] iv = new byte[IV_LENGTH];
        byte[] temp = new byte[16];
        
        temp = md5(password).getBytes();
        byte[] keys = new byte[32];
           
                System.out.println(md5(password).getBytes().length);
                for (int x = 0; x <= 15; x++){
                    iv [x] = temp[x];
                    
                }
                Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
                SecretKeySpec keySpec = new SecretKeySpec(keys,"AES");
                IvParameterSpec IvSpec = new IvParameterSpec(iv);
                cipher.init(Cipher.ENCRYPT_MODE,keySpec,IvSpec);
              
                
                
           
             
                
             
                out = new CipherOutputStream(out,cipher);
                int numRead = 0;
                byte[] buf = new byte[1024];
                while((numRead = in.read(buf)) >=0) {
                  out.write(buf , 0 , numRead);
                  
                
           
                }
                out.close();
                        
                
            
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null, ex.getMessage(),"Error",0);
    }
}  
public static void EncryptName(String password,String text){
    
    try {
       byte[] iv = new byte[IV_LENGTH];
        byte[] temp = new byte[16];
        
        temp = md5(password).getBytes();
        byte[] keys = new byte[32];
           
                System.out.println(md5(password).getBytes().length);
                for (int x = 0; x <= 15; x++){
                    iv [x] = temp[x];
                    
                }
                Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
                SecretKeySpec keySpec = new SecretKeySpec(keys,"AES");
                IvParameterSpec IvSpec = new IvParameterSpec(iv);
                cipher.init(Cipher.ENCRYPT_MODE,keySpec,IvSpec);
        byte [] encrypt = cipher.doFinal(text.getBytes());
        System.out.println(new String(encrypt));
        
         File oldFile = new File(text);
         File newFile = new File(encrypt.toString()+".enc");
        if(oldFile.renameTo(newFile)) {
         System.out.println("renamed");
         } else {
         System.out.println("Error");
        }    
        
        
        
        } catch (Exception e) {
            e.printStackTrace();
    }
}


public static void copy(int mode,String inputFile,String outputFile,String password) throws Exception{
    int x = 0;
    BufferedInputStream is = new BufferedInputStream(new FileInputStream(inputFile));
    BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(outputFile));
    
    if(mode == Cipher.ENCRYPT_MODE){
    encrypt(is,os,password);
    x = 2;
    }
    
    else throw new Exception("unknow mode");
    if(x == -1  || x == 0){
        JOptionPane.showMessageDialog(null,"Decryption Failed","Failed",0);
    }else{
        if(x != 2){
           JOptionPane.showMessageDialog(null,"Decryption Done","Done",0);
        }
        is.close();
        os.close();
    }
}


public void input(){
    
 

    //File input dialog
    int fileinput_1;
    JFileChooser ts = new JFileChooser();
    ts.setMultiSelectionEnabled(true);
    //fileinput_1 = ts.showOpenDialog(null);
    
    //Table
    DefaultTableModel dd = (DefaultTableModel)jTable1.getModel();

   //File
    File filepath_1 [] = ts.getSelectedFiles();
 
    //ใช้เก็บข้อมูลแบบ array โดยเข้าถึงโดยการอ้างอิงแบบ index และ vector ขยายหรือลดขนาดตามข้อมูลที่มีการอัพเดท
     Vector addData = new Vector();
     
        for (int i=0; i<filepath_1.length; i++){
            String name = filepath_1[i].getName();
            String path = filepath_1[i].getAbsolutePath();
            long bytes = filepath_1[i].length();
            long kilobytes = (bytes / 1024);
            
            
           addData.add(name);
           addData.add(bytes);
           addData.add("AES 128 bit");
           addData.add("Encryption");
           dd.addRow(addData);
           
           
           
            
           
    
    
    String password_1 = new String(passphrse.getPassword());
    String password_2 = new String(repasspharse.getPassword());
    


    if(new String (passphrse.getPassword()).isEmpty() == false && password_1.equals(password_2)){
        try {
            String fname = name;
            intozip(path,fname);
            copy(Cipher.ENCRYPT_MODE,path + ".zip",path + ".enc",password_2);
            
            //HashFile(password_2,path+".enc");
            //EncryptName(password_2,path+".enc");
            File delfile = new File(path+ ".zip");
            delfile.delete();
            
            
            
            
           
            JOptionPane.showMessageDialog(null,"Encryption Done","Done",1);
            
            
            //dispose();
            
        
        } catch (Exception e) {
            Logger.getLogger(EncryptionISO9660.class.getName()).log(Level.SEVERE,null,e);
            
        }
             
    }else{
        JOptionPane.showMessageDialog(null,"Encryption cancelled","Canceled",1);
    }
}
}


/*public void createUpdate1(){
    passphrse.addCaretListener(new CaretListener() {
    
        public void caretUpdate(CaretEvent e) {
         
            
            String password_1 = new String(passphrse.getPassword());
            
            
            String RexEx = "";
            
            if(password_1.length() < 5 ){
               status.setText("Too short");
               status.setForeground(Color.gray); 
               passpharse.setBackground(Color.gray);
               passpharse.setForeground(Color.GREEN);
            }
            else if (password_1.length() < 7  ){
                status.setText("Weak");
                status.setForeground(Color.red);
                passpharse.setBackground(Color.red);
                passpharse.setForeground(Color.BLUE);
            }
            else if (password_1.length() < 9 ){
                status.setText("Fair");
                status.setForeground(Color.yellow);
                  passpharse.setBackground(Color.yellow);
                  passpharse.setForeground(Color.BLACK);
            }else if (password_1.length() < 11 ){
                status.setText("Strong");
                status.setForeground(Color.green);
                  passpharse.setBackground(Color.green);
                  passpharse.setForeground(Color.MAGENTA);
            }
        }
    });  
}*/


    
    
    
    
    
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String strDataToEncrypt = new String();
        String strCipherText = new String();
        try {
            KeyGenerator keyGen = KeyGenerator.getInstance("AES");
            keyGen.init(128);
            SecretKey secretKey = keyGen.generateKey();
            
            final int AES_KEYLENGTH = 128;
            byte [] iv = new byte[AES_KEYLENGTH / 8 ];
            SecureRandom prng = new SecureRandom();
            prng.nextBytes(iv);
            Cipher aesCipherForEncryption = Cipher.getInstance("AES/CBC/PKCS5Padding");
            aesCipherForEncryption.init(Cipher.ENCRYPT_MODE,secretKey, new IvParameterSpec(iv));
            strDataToEncrypt = "EdwardSnowdenIsSafetyToPivacy";
            byte [] byteDataToEncrypt = strDataToEncrypt.getBytes();
            byte [] byteCipherText = aesCipherForEncryption.doFinal(byteDataToEncrypt);
            strCipherText = Base64.getEncoder().encodeToString(byteCipherText);
            
           
            
            passphrse.setText(strCipherText);
            repasspharse.setText(strCipherText);
            
            
           
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        jButton2.setEnabled(false);
        jButton3.setEnabled(false);
     


        
    }//GEN-LAST:event_formInternalFrameOpened

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
     
         // TODO add your handling code here:
        if(jCheckBox1.isSelected()){
          jButton2.setEnabled(true);
        }else{
            jButton2.setEnabled(false);
            passphrse.setText("");
            repasspharse.setText("");
            
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        if(!passphrse.getText().equals(repasspharse.getText())){
            JOptionPane.showMessageDialog(null,"Plase input passphrase correct!!","Warning",3);
        }else if(passphrse.getText().equals("") || repasspharse.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Plase input your passphrase","Warning",3);
        }else{
            input();
        }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
      
	Properties prop = new Properties();
	OutputStream output = null;

	try {
                JFileChooser inFile = new JFileChooser();
                inFile.showSaveDialog(null);
               
		output = new FileOutputStream(inFile.getSelectedFile()+".buzzy");

		// set the properties value
	
		prop.setProperty("dbpassword", passphrse.getText());
		prop.setProperty("dbrepassword", repasspharse.getText());

		// save properties to project root folder
		prop.store(output, null);

	} catch (IOException io) {
		io.printStackTrace();
	} finally {
		if (output != null) {
			try {
				output.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

	}
  

  
         
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
        if(jCheckBox2.isSelected()){
            jButton3.setEnabled(true);
            
        }else{
            jButton3.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        // TODO add your handling code here:
        if (jCheckBox3.isSelected()) {
            passphrse.setEchoChar((char)0);
            repasspharse.setEchoChar((char)0);
            
        }else{
            passphrse.setEchoChar('*');
            repasspharse.setEchoChar('*');
        }
    }//GEN-LAST:event_jCheckBox3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField passphrse;
    private javax.swing.JPasswordField repasspharse;
    // End of variables declaration//GEN-END:variables
}

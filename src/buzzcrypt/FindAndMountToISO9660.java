/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package buzzcrypt;


import static buzzcrypt.FrameMainProgram.jTable1;
import static buzzcrypt.FrameMainProgram.select_file_to_mount;
import java.awt.Component;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;
import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.CipherOutputStream;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Beerbuzz01
 */
public class FindAndMountToISO9660 extends javax.swing.JInternalFrame {

    /**
     * Creates new form FindAndMountToISO9660
     */
    
    private static String OS = System.getProperty("os.name").toLowerCase();
    public boolean checks;
    private static final int IV_LENGTH = 16;
    
    public FindAndMountToISO9660() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        pathmount = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        pathmount_2 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        mkdir_2 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        jTextField3 = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Mount and Unmout ISO 9660");
        setAutoscrolls(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_buzzcrypt/bee_read.png_24x24.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton2.setText("Mount");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton3.setText("Unmount");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(187, 187, 187));
        jLabel2.setForeground(new java.awt.Color(204, 204, 255));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(71, 71, 71)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3))
                    .addComponent(pathmount, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(pathmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton3)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel2)))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Windows Only", jPanel3);

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton4.setText("Select");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setText("Mount");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton5.setText("OK");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Create Directory");

        jButton6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton6.setText("Unmount");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Select File");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "/mnt/", "/media/", "" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel1))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(mkdir_2, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
                            .addComponent(pathmount_2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mkdir_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pathmount_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton6))
                .addGap(12, 12, 12))
        );

        jTabbedPane1.addTab("Linux Only", jPanel4);

        jTextField3.setText("Plase wait........");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(96, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(67, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Mac Only", jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    public void outzip(String zipFile,String outputFolder){
    try {
        byte[] buffer = new byte[1024];
        ZipInputStream zis = new ZipInputStream(new FileInputStream(zipFile));
        ZipEntry ze = zis.getNextEntry();
        if(ze == null ){
            checks = false;
            
        }else{
            checks = true;
        } while(ze != null){
            String fileName = ze.getName();
            File newFile = new File(outputFolder + File.separator + fileName);
            FileOutputStream fos = new FileOutputStream(newFile);
            
            int len;
            while((len = zis.read(buffer)) > 0){
                fos.write(buffer, 0 , len);
            }
            fos.close();
            ze = zis.getNextEntry();
        }
        zis.closeEntry();
        zis.close();
        System.out.println("Done");
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null, ex);
    }
}
public static void intozip(String filepath,String fname)
{
    try {
            FileInputStream fis = new FileInputStream(filepath);
            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(filepath+".zip"));
            zos.putNextEntry(new ZipEntry(fname));
            byte [] Buffer = new byte[1024];
            int bytesRead;
            while((bytesRead = fis.read(Buffer)) > 0 ){
                zos.write(Buffer,0,bytesRead);
            }
            zos.closeEntry();
            zos.close();
            fis.close();
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null, ex);
    }

}
public static String md5(String input)
{
    
        String md5 = null;
        if(null == input ) return null;
        try {
        MessageDigest digest = MessageDigest.getInstance("MD5");
        digest.update(input.getBytes(),0,input.length());
        md5 = new BigInteger(1,digest.digest()).toString(8);
    } catch (NoSuchAlgorithmException ex) {
        ex.printStackTrace();
    }
    return md5;
}

public static void encrypt(InputStream in,OutputStream out,String password){
    try {
        byte[] iv = new byte[IV_LENGTH];
        byte[] temp = new byte[16];
        
        temp = md5(password).getBytes();
        byte[] keys = new byte[32];
           
                System.out.println(md5(password).getBytes().length);
                for (int x = 0; x <= 15; x++){
                    iv [x] = temp[x];
                    
                }
                Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
                SecretKeySpec keySpec = new SecretKeySpec(keys,"AES");
                IvParameterSpec IvSpec = new IvParameterSpec(iv);
                cipher.init(Cipher.ENCRYPT_MODE,keySpec,IvSpec);
                
                out = new CipherOutputStream(out,cipher);
                int numRead = 0;
                byte[] buf = new byte[1024];
                while((numRead = in.read(buf)) >=0) {
                  out.write(buf , 0 , numRead);
                }
                out.close();

    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null, ex.getMessage(),"Error",0);
    }
}
public static int decrypt(InputStream in,OutputStream out,String password)
{
    try {
        byte[] keys = new byte[32];
        byte[] iv = new byte[IV_LENGTH]; 
        byte[] temp = new byte[16];
        temp = md5(password).getBytes();
        for(int x = 0; x <= 15; x++){
            iv[x] = temp[x];
        }
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        SecretKeySpec keySpec = new SecretKeySpec(keys,"AES");
        IvParameterSpec ivSpec = new IvParameterSpec(iv);
        cipher.init(Cipher.DECRYPT_MODE,keySpec,ivSpec);
        
        
        in = new CipherInputStream(in, cipher);
        byte[] buf = new byte[1024];
        int numRead = 0 ;
        while ((numRead = in.read(buf)) >=0){
            out.write(buf, 0 , numRead);
            
        }
        out.close();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, e);
    }
       
    return -1;
}
public static void copy(int mode,String inputFile,String outputFile,String password) throws Exception{
    int x = 0;
    BufferedInputStream is = new BufferedInputStream(new FileInputStream(inputFile));
    BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(outputFile));
    
    if(mode == Cipher.ENCRYPT_MODE){
    encrypt(is,os,password);
    x = 2;
    }
    else if (mode == Cipher.DECRYPT_MODE){
        x = 0;
        x = decrypt(is,os,password);
        
    }
    else throw new Exception("unknow mode");
    if(x == -1  || x == 0){
        //JOptionPane.showMessageDialog(null,"Decryption Failed","Failed",0);
    }else{
        if(x != 2){
           JOptionPane.showMessageDialog(null,"Decryption Done","Done",0);
        }
        is.close();
        os.close();
    }
}

public void input(){
    
    JPasswordField password_1 = new JPasswordField();
    JFileChooser password_2 = new JFileChooser();
    //File input dialog
    int fileinput_1;
    //JFileChooser ts = new JFileChooser();
    //ts.setMultiSelectionEnabled(true);
    //fileinput_1 = ts.showOpenDialog(null);
    

   DefaultTableModel dd = (DefaultTableModel)jTable1.getModel();


    

     Vector addData = new Vector();
     
       
            String name = jLabel2.getText();
            String path = pathmount.getText();
       
            
            
            addData.add(name);
            addData.add("AES /128 bit");
            addData.add("Unmount / Encryption");
            dd.addRow(addData);
        
        
    
    int okCx0 = JOptionPane.showConfirmDialog(null, password_1, "Enter Password",JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE);
    String password_3 = new String(password_1.getPassword());   
    if(okCx0 == JOptionPane.OK_OPTION && new String(password_1.getPassword()).isEmpty()==false){
        try {
            String fname = name;
            intozip(path,fname);
            copy(Cipher.ENCRYPT_MODE,path + ".zip",path + ".enc",password_3);
            File delfile = new File(path+ ".zip");
            File isodelete = new File(path + ".iso");
            delfile.delete();
            isodelete.delete();
            JOptionPane.showMessageDialog(null,"Encryption Done","Done",1);

        } catch (Exception e) {
              e.printStackTrace();
        }
             
    }else{
        JOptionPane.showMessageDialog(null,"Encryption cancelled","Canceled",1);
    }
}


 public void output(){
    
     
     
     JPasswordField password_1 = new JPasswordField();
     JPasswordField password_2 = new JPasswordField();
     
    int inputfile_1;
    
    JFileChooser inputfile = new JFileChooser();
    FileNameExtensionFilter filefilters = new FileNameExtensionFilter("Buzz encrypted files (*.enc)","enc");
   
    inputfile.setFileFilter(filefilters);
    inputfile_1 = inputfile.showOpenDialog(null);

    
       DefaultTableModel fx = (DefaultTableModel)jTable1.getModel();
     
        File filepath_1  = inputfile.getSelectedFile();
        String filefullpath = filepath_1.getAbsolutePath();
        
        
    
        
        
      Vector addData = new Vector(); 
      
           String name = filepath_1.getName();
           String path = filepath_1.getPath();
           long bytes = filepath_1.length();
           long kilobytes = bytes/1024;
           
            addData.add(name);
            addData.add(bytes);
            addData.add("AES /128 bit");
            addData.add("Mount /Decryption");
            
            jLabel2.setText(name.substring(0,name.lastIndexOf('.')));
            
            fx.addRow(addData);
            pathmount.setText(path.substring(0,path.lastIndexOf('.')));  
       
      int okCx1 = JOptionPane.showConfirmDialog(null, password_1, "Enter Password",JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE);
      if(okCx1 == JOptionPane.OK_OPTION && new String(password_1.getPassword()).isEmpty()==false){ 
       String password_3 = new String(password_1.getPassword());
            try {
                copy(Cipher.DECRYPT_MODE,filefullpath,filefullpath.replace(".enc",".zip"),password_3);
                String folder = filepath_1.getParent();
                outzip(filefullpath.replace(".enc",".zip"),folder);
                File deletefile = new File(filefullpath.replace(".enc",".zip"));
                deletefile.delete();
                File deletefileenc = new File(path + ".enc");
                deletefileenc.delete();
                if(checks){
                    JOptionPane.showMessageDialog(null,"Decrypted And Mount","Successfu",1);
                }else{
                    JOptionPane.showMessageDialog(null,"Decrypted Fail","Fail",0);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,e,"cancel",1);
            }
        
      }
 }
    
    
    
    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
    System.out.println(OS);

		if (isWindows()) {
                jTabbedPane1.setEnabledAt(1, false);
                jTabbedPane1.setEnabledAt(2, false);
                } else if (isMac()) {
		
                jTabbedPane1.setEnabledAt(0, false);
                jTabbedPane1.setEnabledAt(1, false);
           
   
                 
                } else if(isUnix()) {
                jTabbedPane1.setEnabledAt(0, false);
                jTabbedPane1.setEnabledAt(2, false);
	}
    }

	public static boolean isWindows() {

		return (OS.indexOf("win") >= 0);

	}

	public static boolean isMac() {

		return (OS.indexOf("mac") >= 0);

	}

	public static boolean isUnix() {

		return (OS.indexOf("nix") >= 0 || OS.indexOf("nux") >= 0 || OS.indexOf("aix") > 0 );

	}

	public static boolean isSolaris() {

		return (OS.indexOf("sunos") >= 0);

	
   
       
    }//GEN-LAST:event_formInternalFrameOpened

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         
        try {
              output();
              
              select_file_to_mount.setText(pathmount.getText());
              String Path = pathmount.getText();
              String command = "powershell.exe  Mount-DiskImage  -ImagePath  " +Path;
                 // รัน Command
                Process powerShellProcess = Runtime.getRuntime().exec(command);
               
                        powerShellProcess.getOutputStream().close();
                            String line;
                            System.out.println("Standard Output:");
                                BufferedReader stdout = new BufferedReader(new InputStreamReader(powerShellProcess.getInputStream()));
                            while ((line = stdout.readLine()) != null) {
                             System.out.println(line);
                                 }
                                 stdout.close();
                                 System.out.println("Standard Error:");BufferedReader stderr = new BufferedReader(new InputStreamReader(
                                         powerShellProcess.getErrorStream()));
                            while ((line = stderr.readLine()) != null) {
                                  System.out.println(line);
                                      }
                                 stderr.close();
                            System.out.println("Done");
                       
                         
           
                            } catch (Exception e) {
                                e.printStackTrace();
                             }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
         input();
         try {
              
              String Path = pathmount.getText();
              String command = "powershell.exe  Dismount-DiskImage  -ImagePath "+Path;
  // Executing the command
                Process powerShellProcess = Runtime.getRuntime().exec(command);
  // Getting the results
            powerShellProcess.getOutputStream().close();
            String line;
            System.out.println("Standard Output:");
            BufferedReader stdout = new BufferedReader(new InputStreamReader(
             powerShellProcess.getInputStream()));
             while ((line = stdout.readLine()) != null) {
             System.out.println(line);
             }
             stdout.close();
             System.out.println("Standard Error:");
             BufferedReader stderr = new BufferedReader(new InputStreamReader(
             powerShellProcess.getErrorStream()));
        while ((line = stderr.readLine()) != null) {
             System.out.println(line);
                    }
             stderr.close();
             System.out.println("Done");

        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            JFileChooser open = new JFileChooser();
           open.showOpenDialog(null);
           File test = open.getSelectedFile();
           String path = test.getAbsolutePath();
           
           pathmount_2.setText(path);
           pathmount_2.setText(path.substring(0,path.lastIndexOf('.')));  
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try {
                    String Path = pathmount_2.getText();
                    String command = "sudo mount -o loop "+ Path + "  " +jComboBox1.getSelectedItem();
                    
                    Process terminal = Runtime.getRuntime().exec(command);
                            terminal.getOutputStream().close();
                            String line;
                            System.out.println("Standard Output");
                                BufferedReader stdout = new BufferedReader(new InputStreamReader(terminal.getInputStream()));
                                while ((line = stdout.readLine()) != null){
                                    System.out.println(line);
                                  
                                }
                                stdout.close();
                                System.out.println("Standard Error :");
                                BufferedReader stderr = new BufferedReader(new InputStreamReader(terminal.getErrorStream()));
                                while((line = stderr.readLine()) != null){
                                    System.out.println(line);
                                }
                                stderr.close();
                         System.out.println("Done");
                        
                        
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
         try {
                    String Mkdir = mkdir_2.getText();
                    String command = "sudo mkdir "+ jComboBox1.getSelectedItem() + Mkdir;
                    
                    Process terminal = Runtime.getRuntime().exec(command);
                            terminal.getOutputStream().close();
                            String line;
                            System.out.println("Standard Output");
                                BufferedReader stdout = new BufferedReader(new InputStreamReader(terminal.getInputStream()));
                                while ((line = stdout.readLine()) != null){
                                    System.out.println(line);
                                  
                                }
                                stdout.close();
                                System.out.println("Standard Error :");
                                BufferedReader stderr = new BufferedReader(new InputStreamReader(terminal.getErrorStream()));
                                while((line = stderr.readLine()) != null){
                                    System.out.println(line);
                                }
                                stderr.close();
                         System.out.println("Done");
                        
                        
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        try {
                    String Mkdir = mkdir_2.getText();
                    String command = "sudo mkdir "+ jComboBox1.getSelectedItem() + Mkdir;
                    
                    Process terminal = Runtime.getRuntime().exec(command);
                            terminal.getOutputStream().close();
                            String line;
                            System.out.println("Standard Output");
                                BufferedReader stdout = new BufferedReader(new InputStreamReader(terminal.getInputStream()));
                                while ((line = stdout.readLine()) != null){
                                    System.out.println(line);
                                  
                                }
                                stdout.close();
                                System.out.println("Standard Error :");
                                BufferedReader stderr = new BufferedReader(new InputStreamReader(terminal.getErrorStream()));
                                while((line = stderr.readLine()) != null){
                                    System.out.println(line);
                                }
                                stderr.close();
                         System.out.println("Done");
                        
                        
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        
        try {
                    String Path = pathmount_2.getText();
                    String command = "umount"+"   "+jComboBox1.getSelectedItem() + mkdir_2.getText();
                    
                    Process terminal = Runtime.getRuntime().exec(command);
                            terminal.getOutputStream().close();
                            String line;
                            System.out.println("Standard Output");
                                BufferedReader stdout = new BufferedReader(new InputStreamReader(terminal.getInputStream()));
                                while ((line = stdout.readLine()) != null){
                                    System.out.println(line);
                                  
                                }
                                stdout.close();
                                System.out.println("Standard Error :");
                                BufferedReader stderr = new BufferedReader(new InputStreamReader(terminal.getErrorStream()));
                                while((line = stderr.readLine()) != null){
                                    System.out.println(line);
                                }
                                stderr.close();
                         System.out.println("Done");
                        
                        
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
    }//GEN-LAST:event_jButton6ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    public static javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField mkdir_2;
    public static javax.swing.JTextField pathmount;
    private javax.swing.JTextField pathmount_2;
    // End of variables declaration//GEN-END:variables
}
